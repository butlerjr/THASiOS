/* This file was generated by the ServiceGenerator.
 * The ServiceGenerator is Copyright (c) 2015 Google Inc.
 */

//
//  GTLQuerySculptures.m
//

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   sculptures/v1
// Description:
//   Sculpture API
// Classes:
//   GTLQuerySculptures (9 custom class methods, 5 custom properties)

#import "GTLQuerySculptures.h"

#import "GTLSculpturesArtist.h"
#import "GTLSculpturesArtistCollection.h"
#import "GTLSculpturesComment.h"
#import "GTLSculpturesCommentCollection.h"
#import "GTLSculpturesSculpture.h"
#import "GTLSculpturesSculptureCollection.h"

@implementation GTLQuerySculptures

@dynamic entityKey, fields, limit, order, pageToken;

#pragma mark -
#pragma mark "artist" methods
// These create a GTLQuerySculptures object.

+ (instancetype)queryForArtistDeleteWithEntityKey:(NSString *)entityKey {
  NSString *methodName = @"sculptures.artist.delete";
  GTLQuerySculptures *query = [self queryWithMethodName:methodName];
  query.entityKey = entityKey;
  query.expectedObjectClass = [GTLSculpturesArtist class];
  return query;
}

+ (instancetype)queryForArtistInsertWithObject:(GTLSculpturesArtist *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"sculptures.artist.insert";
  GTLQuerySculptures *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLSculpturesArtist class];
  return query;
}

+ (instancetype)queryForArtistList {
  NSString *methodName = @"sculptures.artist.list";
  GTLQuerySculptures *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLSculpturesArtistCollection class];
  return query;
}

#pragma mark -
#pragma mark "comment" methods
// These create a GTLQuerySculptures object.

+ (instancetype)queryForCommentDeleteWithEntityKey:(NSString *)entityKey {
  NSString *methodName = @"sculptures.comment.delete";
  GTLQuerySculptures *query = [self queryWithMethodName:methodName];
  query.entityKey = entityKey;
  query.expectedObjectClass = [GTLSculpturesComment class];
  return query;
}

+ (instancetype)queryForCommentInsertWithObject:(GTLSculpturesComment *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"sculptures.comment.insert";
  GTLQuerySculptures *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLSculpturesComment class];
  return query;
}

+ (instancetype)queryForCommentList {
  NSString *methodName = @"sculptures.comment.list";
  GTLQuerySculptures *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLSculpturesCommentCollection class];
  return query;
}

#pragma mark -
#pragma mark "sculpture" methods
// These create a GTLQuerySculptures object.

+ (instancetype)queryForSculptureDeleteWithEntityKey:(NSString *)entityKey {
  NSString *methodName = @"sculptures.sculpture.delete";
  GTLQuerySculptures *query = [self queryWithMethodName:methodName];
  query.entityKey = entityKey;
  query.expectedObjectClass = [GTLSculpturesSculpture class];
  return query;
}

+ (instancetype)queryForSculptureInsertWithObject:(GTLSculpturesSculpture *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"sculptures.sculpture.insert";
  GTLQuerySculptures *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLSculpturesSculpture class];
  return query;
}

+ (instancetype)queryForSculptureList {
  NSString *methodName = @"sculptures.sculpture.list";
  GTLQuerySculptures *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLSculpturesSculptureCollection class];
  return query;
}

@end
